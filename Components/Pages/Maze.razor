@page "/Maze"
@using Microsoft.JSInterop 
@using AnimeMaze.Data
@using AnimeMaze.Models
@using AnimeMaze.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Maze</PageTitle>

<div role="container" class="flex flex-col h-screen">
    <MazeHeader ResetMaze="ResetMaze" />
    
    @if (showModal)
    {
        <GameWonModal Message="@winningMessage"
                      OnResetGame="ResetMaze" 
                      OnSelectNewCharacters="SelectNewCharacters" />
    }
    else
    {
        <PlayersHealth Players="players"/>
        <div class="text-white">Turno de: Jugador @(TurnManager.CurrentPlayerIndex + 1)</div>
        <main class="flex flex-col gap-2 bg-black items-center p-2 flex-grow">
            <MazeGrid game="LabyrinthData.Game" players="players" OnClickMaze="EventCallback.Factory.Create<(int, int)>(this, OnClickMaze)"/> 
            <MazeNavigation MovePlayer="MovePlayerAsync" Attack="AttackPlayer" />
        </main>
    }
</div>

<script>
    window.addKeyListener = function (dotNetHelper) {
        document.addEventListener('keydown', function (event) {
            dotNetHelper.invokeMethodAsync('OnKeyPress', event.key);
        });
    };
</script>

@code {
    private List<Player> players = PlayerData.Players;
    private bool showModal = false;
    private string winningMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addKeyListener", DotNetObjectReference.Create(this));
        }
    }

    private async Task MovePlayerAsync(string direction)
    {
        if (TurnManager.CurrentPlayer != null && !showModal)
        {
            bool hasWon = TurnManager.CurrentPlayer.MovePlayer(direction);
            if (hasWon)
            {
                winningMessage = $"Â¡Jugador {TurnManager.CurrentPlayerIndex + 1} ha ganado!";
                showModal = true;
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AttackPlayer()
    {
        if (TurnManager.CurrentPlayer != null)
        {
            TurnManager.CurrentPlayer.Attack();
            StateHasChanged();
        }
    }

    private void OnClickMaze((int row, int col) position)
    {
        var player = TurnManager.CurrentPlayer;
        if (player != null)
        {
            var currentPosition = player.Position;
            if (position.row < currentPosition.RowPosition)
            {
                player.FacingDirection = Direction.Up;
            }
            else if (position.row > currentPosition.RowPosition)
            {
                player.FacingDirection = Direction.Down;
            }
            else if (position.col < currentPosition.ColPosition)
            {
                player.FacingDirection = Direction.Left;
            }
            else if (position.col > currentPosition.ColPosition)
            {
                player.FacingDirection = Direction.Right;
            }
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnKeyPress(string key)
    {
        switch (key)
        {
            case "ArrowUp" or "w":
                await MovePlayerAsync("up");
                break;
            case "ArrowDown" or "s":
                await MovePlayerAsync("down");
                break;
            case "ArrowLeft" or "a":
                await MovePlayerAsync("left");
                break;
            case "ArrowRight" or "d":
                await MovePlayerAsync("right");
                break;
            case "e":
                AttackPlayer();
                break;
        }
        await InvokeAsync(StateHasChanged);
    }

    private void ResetMaze()
    {
        LabyrinthData.ResetLabyrinth();
        TurnManager.ResetTurns();
        PlayerData.ResetPlayerPositions();
        showModal = false;
        StateHasChanged();
    }

    private void SelectNewCharacters()
    {
        PlayerData.Players.Clear();
        TurnManager.ResetTurns(); 
        PlayerData.InitializePlayers(PlayerData.NumberOfPlayers); 
        Navigation.NavigateTo("/Characters");
        showModal = false;
        StateHasChanged();
    }
}
