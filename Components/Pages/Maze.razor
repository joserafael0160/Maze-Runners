@page "/Maze"
@using Microsoft.JSInterop 
@using AnimeMaze.Data
@using AnimeMaze.Models
@using AnimeMaze.Services
@inject IJSRuntime JSRuntime

<PageTitle>Maze</PageTitle>

<div role="container" class="flex flex-col h-screen ">
    <MazeHeader ResetMaze="ResetMaze" />

    <div class="text-white">Turno de: Jugador @(TurnManager.CurrentPlayerIndex + 1)</div>
    <main class="flex flex-col gap-2 bg-black items-center p-2 flex-grow">
        <MazeGrid game="LabyrinthData.Game" players="players" /> 
        <MazeNavigation MovePlayer="MovePlayer" />
    </main>
</div> 

<script>
    window.addKeyListener = function (dotNetHelper) {
        document.addEventListener('keydown', function (event) {
            dotNetHelper.invokeMethodAsync('OnKeyPress', event.key)
        });
    };
</script>

@code {
    private List<Player> players = PlayerData.Players;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addKeyListener", DotNetObjectReference.Create(this));
        }
    }

    private void MovePlayer(string direction)
    {
        if (TurnManager.CurrentPlayer != null)
        {
            TurnManager.CurrentPlayer.MovePlayer(direction);
            StateHasChanged(); 
        }
    }

    [JSInvokable]
    public void OnKeyPress(string key)
    {
        switch (key)
        {
            case "ArrowUp" or "w":
                MovePlayer("up");
                break;
            case "ArrowDown" or "s":
                MovePlayer("down");
                break;
            case "ArrowLeft" or "a":
                MovePlayer("left");
                break;
            case "ArrowRight" or "d":
                MovePlayer("right");
                break;
        }
        InvokeAsync(StateHasChanged);
    }


    private void ResetMaze()
    {
        LabyrinthData.ResetLabyrinth();
        TurnManager.ResetTurns();
        players = PlayerData.Players; 
        StateHasChanged(); 
    }
}
