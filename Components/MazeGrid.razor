@using AnimeMaze.Models;
@using AnimeMaze.Services;
@using AnimeMaze.Data;

<section class="grid grid-cols-10 w-3/4 aspect-square" aria-live="polite">
    @if (game != null && players != null)
    {
        for (int row = 0; row < game.Maze.GetLength(0); row++)
        {
            for (int col = 0; col < game.Maze.GetLength(1); col++)
            {
                var playerAtCell = players.FirstOrDefault(p => p.Position.RowPosition == row && p.Position.ColPosition == col);

                if (playerAtCell != null && playerAtCell.HeroSelected != null)
                {
                    string borderClass = playerAtCell == TurnManager.CurrentPlayer ? "border-4 border-blue-500" : "";
                    <img src="@playerAtCell.HeroSelected.Image" alt="@playerAtCell.HeroSelected.Name" class="h-full w-full object-cover aspect-square @borderClass" @onclick="() => HandleClick(row, col)">
                }
                else
                {
                    var cell = game.Maze[row, col];
                    <span class="@GetCellClass(cell)" @onclick="() => HandleClick(row, col)"></span>
                }
            }
        }
    }
</section>

@code {
    [Parameter]
    public Labyrinth? game { get; set; }
    [Parameter]
    public List<Player>? players { get; set; }
    [Parameter]
    public EventCallback<(int, int)> OnClickMaze { get; set; }

    private string GetCellClass(Labyrinth.Cell cell)
    {
        return cell switch
        {
            Labyrinth.Cell.Road => "bg-white",
            Labyrinth.Cell.Wall => "bg-gray-900",
            Labyrinth.Cell.Trap => "bg-red-800",
            Labyrinth.Cell.Exit => "bg-green-800",
            _ => ""
        };
    }

    private void HandleClick(int row, int col)
    {
        OnClickMaze.InvokeAsync((row, col));
    }
}
